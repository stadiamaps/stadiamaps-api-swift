//
// GeocodingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

open class GeocodingAPI {
    /**
     Search and geocode quickly based on partial input.

     - parameter text: (query) The place name (address, venue name, etc.) to search for.
     - parameter focusPointLat: (query) The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     - parameter focusPointLon: (query) The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     - parameter boundaryRectMinLat: (query) Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLat: (query) Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMinLon: (query) Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLon: (query) Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryCircleLat: (query) The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     - parameter boundaryCircleLon: (query) The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: PeliasResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func autocomplete(text: String, focusPointLat: Double? = nil, focusPointLon: Double? = nil, boundaryRectMinLat: Double? = nil, boundaryRectMaxLat: Double? = nil, boundaryRectMinLon: Double? = nil, boundaryRectMaxLon: Double? = nil, boundaryCircleLat: Double? = nil, boundaryCircleLon: Double? = nil, boundaryCircleRadius: Double? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, size: Int? = nil, lang: String? = nil) async throws -> PeliasResponse {
        try await autocompleteWithRequestBuilder(text: text, focusPointLat: focusPointLat, focusPointLon: focusPointLon, boundaryRectMinLat: boundaryRectMinLat, boundaryRectMaxLat: boundaryRectMaxLat, boundaryRectMinLon: boundaryRectMinLon, boundaryRectMaxLon: boundaryRectMaxLon, boundaryCircleLat: boundaryCircleLat, boundaryCircleLon: boundaryCircleLon, boundaryCircleRadius: boundaryCircleRadius, boundaryCountry: boundaryCountry, boundaryGid: boundaryGid, layers: layers, sources: sources, size: size, lang: lang).execute().body
    }

    /**
     Search and geocode quickly based on partial input.
     - GET /geocoding/v1/autocomplete
     - Autocomplete enables interactive search-as-you-type user experiences, suggesting places as you type, along with information that will help your users find the correct place quickly.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - parameter text: (query) The place name (address, venue name, etc.) to search for.
     - parameter focusPointLat: (query) The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     - parameter focusPointLon: (query) The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     - parameter boundaryRectMinLat: (query) Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLat: (query) Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMinLon: (query) Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLon: (query) Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryCircleLat: (query) The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     - parameter boundaryCircleLon: (query) The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: RequestBuilder<PeliasResponse>
     */
    open class func autocompleteWithRequestBuilder(text: String, focusPointLat: Double? = nil, focusPointLon: Double? = nil, boundaryRectMinLat: Double? = nil, boundaryRectMaxLat: Double? = nil, boundaryRectMinLon: Double? = nil, boundaryRectMaxLon: Double? = nil, boundaryCircleLat: Double? = nil, boundaryCircleLon: Double? = nil, boundaryCircleRadius: Double? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, size: Int? = nil, lang: String? = nil) -> RequestBuilder<PeliasResponse> {
        let localVariablePath = "/geocoding/v1/autocomplete"
        let localVariableURLString = StadiaMapsAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": (wrappedValue: text.encodeToJSON(), isExplode: true),
            "focus.point.lat": (wrappedValue: focusPointLat?.encodeToJSON(), isExplode: true),
            "focus.point.lon": (wrappedValue: focusPointLon?.encodeToJSON(), isExplode: true),
            "boundary.rect.min_lat": (wrappedValue: boundaryRectMinLat?.encodeToJSON(), isExplode: true),
            "boundary.rect.max_lat": (wrappedValue: boundaryRectMaxLat?.encodeToJSON(), isExplode: true),
            "boundary.rect.min_lon": (wrappedValue: boundaryRectMinLon?.encodeToJSON(), isExplode: true),
            "boundary.rect.max_lon": (wrappedValue: boundaryRectMaxLon?.encodeToJSON(), isExplode: true),
            "boundary.circle.lat": (wrappedValue: boundaryCircleLat?.encodeToJSON(), isExplode: true),
            "boundary.circle.lon": (wrappedValue: boundaryCircleLon?.encodeToJSON(), isExplode: true),
            "boundary.circle.radius": (wrappedValue: boundaryCircleRadius?.encodeToJSON(), isExplode: true),
            "boundary.country": (wrappedValue: boundaryCountry?.encodeToJSON(), isExplode: false),
            "boundary.gid": (wrappedValue: boundaryGid?.encodeToJSON(), isExplode: true),
            "layers": (wrappedValue: layers?.encodeToJSON(), isExplode: false),
            "sources": (wrappedValue: sources?.encodeToJSON(), isExplode: false),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PeliasResponse>.Type = StadiaMapsAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve details of a place using its GID.

     - parameter ids: (query) A list of Pelias GIDs to search for.
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: PeliasResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func place(ids: [String], lang: String? = nil) async throws -> PeliasResponse {
        try await placeWithRequestBuilder(ids: ids, lang: lang).execute().body
    }

    /**
     Retrieve details of a place using its GID.
     - GET /geocoding/v1/place
     - Many search result components include an associated GID field (for example, an address may have a `localadmin_gid`). The place endpoint lets you look up these places directly by ID. Note that these IDs are not stable for all sources. See the [online documentation](https://docs.stadiamaps.com/geocoding-search-autocomplete/place-lookup/) for details.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - parameter ids: (query) A list of Pelias GIDs to search for.
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: RequestBuilder<PeliasResponse>
     */
    open class func placeWithRequestBuilder(ids: [String], lang: String? = nil) -> RequestBuilder<PeliasResponse> {
        let localVariablePath = "/geocoding/v1/place"
        let localVariableURLString = StadiaMapsAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": (wrappedValue: ids.encodeToJSON(), isExplode: false),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PeliasResponse>.Type = StadiaMapsAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find places and addresses near geographic coordinates (reverse geocoding).

     - parameter pointLat: (query) The latitude of the point at which to perform the search.
     - parameter pointLon: (query) The longitude of the point at which to perform the search.
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: PeliasResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reverse(pointLat: Double, pointLon: Double, boundaryCircleRadius: Double? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, size: Int? = nil, lang: String? = nil) async throws -> PeliasResponse {
        try await reverseWithRequestBuilder(pointLat: pointLat, pointLon: pointLon, boundaryCircleRadius: boundaryCircleRadius, layers: layers, sources: sources, boundaryCountry: boundaryCountry, boundaryGid: boundaryGid, size: size, lang: lang).execute().body
    }

    /**
     Find places and addresses near geographic coordinates (reverse geocoding).
     - GET /geocoding/v1/reverse
     - Reverse geocoding and search finds places and addresses near any geographic coordinates.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - parameter pointLat: (query) The latitude of the point at which to perform the search.
     - parameter pointLon: (query) The longitude of the point at which to perform the search.
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: RequestBuilder<PeliasResponse>
     */
    open class func reverseWithRequestBuilder(pointLat: Double, pointLon: Double, boundaryCircleRadius: Double? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, size: Int? = nil, lang: String? = nil) -> RequestBuilder<PeliasResponse> {
        let localVariablePath = "/geocoding/v1/reverse"
        let localVariableURLString = StadiaMapsAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "point.lat": (wrappedValue: pointLat.encodeToJSON(), isExplode: true),
            "point.lon": (wrappedValue: pointLon.encodeToJSON(), isExplode: true),
            "boundary.circle.radius": (wrappedValue: boundaryCircleRadius?.encodeToJSON(), isExplode: true),
            "layers": (wrappedValue: layers?.encodeToJSON(), isExplode: false),
            "sources": (wrappedValue: sources?.encodeToJSON(), isExplode: false),
            "boundary.country": (wrappedValue: boundaryCountry?.encodeToJSON(), isExplode: false),
            "boundary.gid": (wrappedValue: boundaryGid?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PeliasResponse>.Type = StadiaMapsAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search for location and other info using a place name or address (forward geocoding).

     - parameter text: (query) The place name (address, venue name, etc.) to search for.
     - parameter focusPointLat: (query) The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     - parameter focusPointLon: (query) The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     - parameter boundaryRectMinLat: (query) Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLat: (query) Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMinLon: (query) Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLon: (query) Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryCircleLat: (query) The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     - parameter boundaryCircleLon: (query) The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: PeliasResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func search(text: String, focusPointLat: Double? = nil, focusPointLon: Double? = nil, boundaryRectMinLat: Double? = nil, boundaryRectMaxLat: Double? = nil, boundaryRectMinLon: Double? = nil, boundaryRectMaxLon: Double? = nil, boundaryCircleLat: Double? = nil, boundaryCircleLon: Double? = nil, boundaryCircleRadius: Double? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, size: Int? = nil, lang: String? = nil) async throws -> PeliasResponse {
        try await searchWithRequestBuilder(text: text, focusPointLat: focusPointLat, focusPointLon: focusPointLon, boundaryRectMinLat: boundaryRectMinLat, boundaryRectMaxLat: boundaryRectMaxLat, boundaryRectMinLon: boundaryRectMinLon, boundaryRectMaxLon: boundaryRectMaxLon, boundaryCircleLat: boundaryCircleLat, boundaryCircleLon: boundaryCircleLon, boundaryCircleRadius: boundaryCircleRadius, boundaryCountry: boundaryCountry, boundaryGid: boundaryGid, layers: layers, sources: sources, size: size, lang: lang).execute().body
    }

    /**
     Search for location and other info using a place name or address (forward geocoding).
     - GET /geocoding/v1/search
     - The search endpoint lets you search for addresses, points of interest, and administrative areas. This is most commonly used for forward geocoding applications where you need to find the geographic coordinates of an address.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - parameter text: (query) The place name (address, venue name, etc.) to search for.
     - parameter focusPointLat: (query) The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     - parameter focusPointLon: (query) The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     - parameter boundaryRectMinLat: (query) Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLat: (query) Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMinLon: (query) Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLon: (query) Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryCircleLat: (query) The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     - parameter boundaryCircleLon: (query) The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: RequestBuilder<PeliasResponse>
     */
    open class func searchWithRequestBuilder(text: String, focusPointLat: Double? = nil, focusPointLon: Double? = nil, boundaryRectMinLat: Double? = nil, boundaryRectMaxLat: Double? = nil, boundaryRectMinLon: Double? = nil, boundaryRectMaxLon: Double? = nil, boundaryCircleLat: Double? = nil, boundaryCircleLon: Double? = nil, boundaryCircleRadius: Double? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, size: Int? = nil, lang: String? = nil) -> RequestBuilder<PeliasResponse> {
        let localVariablePath = "/geocoding/v1/search"
        let localVariableURLString = StadiaMapsAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": (wrappedValue: text.encodeToJSON(), isExplode: true),
            "focus.point.lat": (wrappedValue: focusPointLat?.encodeToJSON(), isExplode: true),
            "focus.point.lon": (wrappedValue: focusPointLon?.encodeToJSON(), isExplode: true),
            "boundary.rect.min_lat": (wrappedValue: boundaryRectMinLat?.encodeToJSON(), isExplode: true),
            "boundary.rect.max_lat": (wrappedValue: boundaryRectMaxLat?.encodeToJSON(), isExplode: true),
            "boundary.rect.min_lon": (wrappedValue: boundaryRectMinLon?.encodeToJSON(), isExplode: true),
            "boundary.rect.max_lon": (wrappedValue: boundaryRectMaxLon?.encodeToJSON(), isExplode: true),
            "boundary.circle.lat": (wrappedValue: boundaryCircleLat?.encodeToJSON(), isExplode: true),
            "boundary.circle.lon": (wrappedValue: boundaryCircleLon?.encodeToJSON(), isExplode: true),
            "boundary.circle.radius": (wrappedValue: boundaryCircleRadius?.encodeToJSON(), isExplode: true),
            "boundary.country": (wrappedValue: boundaryCountry?.encodeToJSON(), isExplode: false),
            "boundary.gid": (wrappedValue: boundaryGid?.encodeToJSON(), isExplode: true),
            "layers": (wrappedValue: layers?.encodeToJSON(), isExplode: false),
            "sources": (wrappedValue: sources?.encodeToJSON(), isExplode: false),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PeliasResponse>.Type = StadiaMapsAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Find locations matching components (structured forward geocoding).

     - parameter address: (query) A street name, optionally with a house number. (optional)
     - parameter neighbourhood: (query) Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     - parameter borough: (query) A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     - parameter locality: (query) The city, village, town, etc. that the place/address is part of. (optional)
     - parameter county: (query) Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     - parameter region: (query) Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     - parameter postalcode: (query) A mail sorting code. (optional)
     - parameter country: (query) A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     - parameter focusPointLat: (query) The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     - parameter focusPointLon: (query) The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     - parameter boundaryRectMinLat: (query) Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLat: (query) Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMinLon: (query) Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLon: (query) Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryCircleLat: (query) The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     - parameter boundaryCircleLon: (query) The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: PeliasResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchStructured(address: String? = nil, neighbourhood: String? = nil, borough: String? = nil, locality: String? = nil, county: String? = nil, region: String? = nil, postalcode: String? = nil, country: String? = nil, focusPointLat: Double? = nil, focusPointLon: Double? = nil, boundaryRectMinLat: Double? = nil, boundaryRectMaxLat: Double? = nil, boundaryRectMinLon: Double? = nil, boundaryRectMaxLon: Double? = nil, boundaryCircleLat: Double? = nil, boundaryCircleLon: Double? = nil, boundaryCircleRadius: Double? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, size: Int? = nil, lang: String? = nil) async throws -> PeliasResponse {
        try await searchStructuredWithRequestBuilder(address: address, neighbourhood: neighbourhood, borough: borough, locality: locality, county: county, region: region, postalcode: postalcode, country: country, focusPointLat: focusPointLat, focusPointLon: focusPointLon, boundaryRectMinLat: boundaryRectMinLat, boundaryRectMaxLat: boundaryRectMaxLat, boundaryRectMinLon: boundaryRectMinLon, boundaryRectMaxLon: boundaryRectMaxLon, boundaryCircleLat: boundaryCircleLat, boundaryCircleLon: boundaryCircleLon, boundaryCircleRadius: boundaryCircleRadius, boundaryCountry: boundaryCountry, boundaryGid: boundaryGid, layers: layers, sources: sources, size: size, lang: lang).execute().body
    }

    /**
     Find locations matching components (structured forward geocoding).
     - GET /geocoding/v1/search/structured
     - The structured search endpoint lets you search for addresses, points of interest, and administrative areas. Rather than a single string which the API must infer meaning from, the structured search endpoint allows you to specify the known components upfront, which is useful in many forward geocoding workflows.
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: ApiKeyAuth
     - parameter address: (query) A street name, optionally with a house number. (optional)
     - parameter neighbourhood: (query) Varies by area, but has a locally specific meaning (NOT always an official administrative unit). (optional)
     - parameter borough: (query) A unit within a city (not widely used, but present in places like NYC and Mexico City). (optional)
     - parameter locality: (query) The city, village, town, etc. that the place/address is part of. (optional)
     - parameter county: (query) Administrative divisions between localities and regions. Not commonly used as input to structured geocoding. (optional)
     - parameter region: (query) Typically the first administrative division within a country. For example, a US state or a Canadian province. (optional)
     - parameter postalcode: (query) A mail sorting code. (optional)
     - parameter country: (query) A full name (ex: Canada), or a 2 or 3 character ISO code. Prefer ISO codes when possible. (optional)
     - parameter focusPointLat: (query) The latitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lon&#x60;. (optional)
     - parameter focusPointLon: (query) The longitude of the point to focus the search on. This will bias results toward the focus point. Requires &#x60;focus.point.lat&#x60;. (optional)
     - parameter boundaryRectMinLat: (query) Defines the min latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLat: (query) Defines the max latitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMinLon: (query) Defines the min longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryRectMaxLon: (query) Defines the max longitude component of a bounding box to limit the search to. Requires all other &#x60;boundary.rect&#x60; parameters to be specified. (optional)
     - parameter boundaryCircleLat: (query) The latitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lon&#x60;. (optional)
     - parameter boundaryCircleLon: (query) The longitude of the center of a circle to limit the search to. Requires &#x60;boundary.circle.lat&#x60;. (optional)
     - parameter boundaryCircleRadius: (query) The radius of the circle (in kilometers) to limit the search to. Defaults to 50km if unspecified. (optional)
     - parameter boundaryCountry: (query) A list of countries to limit the search to. These may be either full names (ex: Canada), or an ISO 3116-1 alpha-2 or alpha-3 code. Prefer ISO codes when possible. (optional)
     - parameter boundaryGid: (query) The Pelias GID of an area to limit the search to. (optional)
     - parameter layers: (query) A list of layers to limit the search to. (optional)
     - parameter sources: (query) A list of sources to limit the search to. (optional)
     - parameter size: (query) The maximum number of results to return. (optional)
     - parameter lang: (query) A BCP47 language tag which specifies a preference for localization of results. By default, results are in the default locale of the source data, but specifying a language will attempt to localize the results. Note that while a &#x60;langtag&#x60; (in RFC 5646 terms) can contain script, region, etc., only the &#x60;language&#x60; portion, an ISO 639 code, will be considered. So &#x60;en-US&#x60; and &#x60;en-GB&#x60; will both be treated as English. (optional)
     - returns: RequestBuilder<PeliasResponse>
     */
    open class func searchStructuredWithRequestBuilder(address: String? = nil, neighbourhood: String? = nil, borough: String? = nil, locality: String? = nil, county: String? = nil, region: String? = nil, postalcode: String? = nil, country: String? = nil, focusPointLat: Double? = nil, focusPointLon: Double? = nil, boundaryRectMinLat: Double? = nil, boundaryRectMaxLat: Double? = nil, boundaryRectMinLon: Double? = nil, boundaryRectMaxLon: Double? = nil, boundaryCircleLat: Double? = nil, boundaryCircleLon: Double? = nil, boundaryCircleRadius: Double? = nil, boundaryCountry: [String]? = nil, boundaryGid: String? = nil, layers: [PeliasLayer]? = nil, sources: [PeliasSource]? = nil, size: Int? = nil, lang: String? = nil) -> RequestBuilder<PeliasResponse> {
        let localVariablePath = "/geocoding/v1/search/structured"
        let localVariableURLString = StadiaMapsAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "neighbourhood": (wrappedValue: neighbourhood?.encodeToJSON(), isExplode: true),
            "borough": (wrappedValue: borough?.encodeToJSON(), isExplode: true),
            "locality": (wrappedValue: locality?.encodeToJSON(), isExplode: true),
            "county": (wrappedValue: county?.encodeToJSON(), isExplode: true),
            "region": (wrappedValue: region?.encodeToJSON(), isExplode: true),
            "postalcode": (wrappedValue: postalcode?.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country?.encodeToJSON(), isExplode: true),
            "focus.point.lat": (wrappedValue: focusPointLat?.encodeToJSON(), isExplode: true),
            "focus.point.lon": (wrappedValue: focusPointLon?.encodeToJSON(), isExplode: true),
            "boundary.rect.min_lat": (wrappedValue: boundaryRectMinLat?.encodeToJSON(), isExplode: true),
            "boundary.rect.max_lat": (wrappedValue: boundaryRectMaxLat?.encodeToJSON(), isExplode: true),
            "boundary.rect.min_lon": (wrappedValue: boundaryRectMinLon?.encodeToJSON(), isExplode: true),
            "boundary.rect.max_lon": (wrappedValue: boundaryRectMaxLon?.encodeToJSON(), isExplode: true),
            "boundary.circle.lat": (wrappedValue: boundaryCircleLat?.encodeToJSON(), isExplode: true),
            "boundary.circle.lon": (wrappedValue: boundaryCircleLon?.encodeToJSON(), isExplode: true),
            "boundary.circle.radius": (wrappedValue: boundaryCircleRadius?.encodeToJSON(), isExplode: true),
            "boundary.country": (wrappedValue: boundaryCountry?.encodeToJSON(), isExplode: false),
            "boundary.gid": (wrappedValue: boundaryGid?.encodeToJSON(), isExplode: true),
            "layers": (wrappedValue: layers?.encodeToJSON(), isExplode: false),
            "sources": (wrappedValue: sources?.encodeToJSON(), isExplode: false),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [:]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PeliasResponse>.Type = StadiaMapsAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: localVariableUrlComponents?.string ?? localVariableURLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
