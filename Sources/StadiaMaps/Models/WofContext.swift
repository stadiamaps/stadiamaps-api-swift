//
// WofContext.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct WofContext: Codable, JSONEncodable, Hashable {
    public var borough: WofContextComponent?
    public var continent: WofContextComponent?
    public var country: WofContextComponent?
    public var county: WofContextComponent?
    public var dependency: WofContextComponent?
    public var localadmin: WofContextComponent?
    public var locality: WofContextComponent?
    public var macrocounty: WofContextComponent?
    public var macroregion: WofContextComponent?
    public var marinearea: WofContextComponent?
    public var neighbourhood: WofContextComponent?
    public var ocean: WofContextComponent?
    public var region: WofContextComponent?

    public init(borough: WofContextComponent? = nil, continent: WofContextComponent? = nil, country: WofContextComponent? = nil, county: WofContextComponent? = nil, dependency: WofContextComponent? = nil, localadmin: WofContextComponent? = nil, locality: WofContextComponent? = nil, macrocounty: WofContextComponent? = nil, macroregion: WofContextComponent? = nil, marinearea: WofContextComponent? = nil, neighbourhood: WofContextComponent? = nil, ocean: WofContextComponent? = nil, region: WofContextComponent? = nil) {
        self.borough = borough
        self.continent = continent
        self.country = country
        self.county = county
        self.dependency = dependency
        self.localadmin = localadmin
        self.locality = locality
        self.macrocounty = macrocounty
        self.macroregion = macroregion
        self.marinearea = marinearea
        self.neighbourhood = neighbourhood
        self.ocean = ocean
        self.region = region
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case borough
        case continent
        case country
        case county
        case dependency
        case localadmin
        case locality
        case macrocounty
        case macroregion
        case marinearea
        case neighbourhood
        case ocean
        case region
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(borough, forKey: .borough)
        try container.encodeIfPresent(continent, forKey: .continent)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(county, forKey: .county)
        try container.encodeIfPresent(dependency, forKey: .dependency)
        try container.encodeIfPresent(localadmin, forKey: .localadmin)
        try container.encodeIfPresent(locality, forKey: .locality)
        try container.encodeIfPresent(macrocounty, forKey: .macrocounty)
        try container.encodeIfPresent(macroregion, forKey: .macroregion)
        try container.encodeIfPresent(marinearea, forKey: .marinearea)
        try container.encodeIfPresent(neighbourhood, forKey: .neighbourhood)
        try container.encodeIfPresent(ocean, forKey: .ocean)
        try container.encodeIfPresent(region, forKey: .region)
    }
}
