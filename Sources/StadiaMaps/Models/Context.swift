//
// Context.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

/** The geographic context for a feature.  Note that while data sources and country codes are listed, this does not *necessarily* mean that the view is a specific hierarchy endorsed by that source. We generally attempt to present the same view as OpenStreetMap. Contact us if your use case requires a specific political view of the world. */
public struct Context: Codable, JSONEncodable, Hashable {
    /** The ISO 3166-1 alpha-2 country code in which the feature is located. */
    public var iso3166A2: String?
    /** The ISO 3166-1 alpha-3 country code in which the feature is located. */
    public var iso3166A3: String?
    /** The geographic context, with administrative hierarchy modeled using the Who's on First taxonomy. */
    public var whosonfirst: WofContext

    public init(iso3166A2: String? = nil, iso3166A3: String? = nil, whosonfirst: WofContext) {
        self.iso3166A2 = iso3166A2
        self.iso3166A3 = iso3166A3
        self.whosonfirst = whosonfirst
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case iso3166A2 = "iso_3166_a2"
        case iso3166A3 = "iso_3166_a3"
        case whosonfirst
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(iso3166A2, forKey: .iso3166A2)
        try container.encodeIfPresent(iso3166A3, forKey: .iso3166A3)
        try container.encode(whosonfirst, forKey: .whosonfirst)
    }
}
