//
// TraceAttributesRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct TraceAttributesRequest: Codable, JSONEncodable, Hashable {
    public enum ShapeMatch: String, Codable, CaseIterable {
        case edgeWalk = "edge_walk"
        case mapSnap = "map_snap"
        case walkOrSnap = "walk_or_snap"
    }

    public enum DirectionsType: String, Codable, CaseIterable {
        case _none = "none"
        case maneuvers
        case instructions
    }

    /** An identifier to disambiguate requests (echoed by the server). */
    public var id: String?
    /** REQUIRED if `encoded_polyline` is not present. Note that `break` type locations are only supported when `shape_match` is set to `map_match`. */
    public var shape: [MapMatchWaypoint]?
    /** REQUIRED if `shape` is not present. An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm). Note that the polyline must be encoded with 6 digits of precision rather than the usual 5. */
    public var encodedPolyline: String?
    public var costing: MapMatchCostingModel
    public var costingOptions: CostingOptions?
    /** Three snapping modes provide some control over how the map matching occurs. `edge_walk` is fast, but requires extremely precise data that matches the route graph almost perfectly. `map_snap` can handle significantly noisier data, but is very expensive. `walk_or_snap`, the default, tries to use edge walking first and falls back to map matching if edge walking fails. In general, you should not need to change this parameter unless you want to trace a multi-leg route with multiple `break` locations in the `shape`. */
    public var shapeMatch: ShapeMatch?
    public var units: DistanceUnit?
    public var language: RoutingLanguages?
    /** The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter. */
    public var directionsType: DirectionsType? = .instructions
    /** If present, provides either a whitelist or a blacklist of keys to include/exclude in the response. This key is optional, and if omitted from the request, all available info will be returned. */
    public var filters: TraceAttributeFilterOptions?
    /** If greater than zero, attempts to include elevation along the route at regular intervals. The \"native\" internal resolution is 30m, so we recommend you use this when possible. This number is interpreted as either meters or feet depending on the unit parameter. Elevation for route sections containing a bridge or tunnel is interpolated linearly. This doesn't always match the true elevation of the bridge/tunnel, but it prevents sharp artifacts from the surrounding terrain. This functionality is unique to the routing endpoints and is not available via the elevation API. NOTE: This has no effect on the OSRM response format. */
    public var elevationInterval: Float? = 0.0

    public init(id: String? = nil, shape: [MapMatchWaypoint]? = nil, encodedPolyline: String? = nil, costing: MapMatchCostingModel, costingOptions: CostingOptions? = nil, shapeMatch: ShapeMatch? = nil, units: DistanceUnit? = nil, language: RoutingLanguages? = nil, directionsType: DirectionsType? = .instructions, filters: TraceAttributeFilterOptions? = nil, elevationInterval: Float? = 0.0) {
        self.id = id
        self.shape = shape
        self.encodedPolyline = encodedPolyline
        self.costing = costing
        self.costingOptions = costingOptions
        self.shapeMatch = shapeMatch
        self.units = units
        self.language = language
        self.directionsType = directionsType
        self.filters = filters
        self.elevationInterval = elevationInterval
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case shape
        case encodedPolyline = "encoded_polyline"
        case costing
        case costingOptions = "costing_options"
        case shapeMatch = "shape_match"
        case units
        case language
        case directionsType = "directions_type"
        case filters
        case elevationInterval = "elevation_interval"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shape, forKey: .shape)
        try container.encodeIfPresent(encodedPolyline, forKey: .encodedPolyline)
        try container.encode(costing, forKey: .costing)
        try container.encodeIfPresent(costingOptions, forKey: .costingOptions)
        try container.encodeIfPresent(shapeMatch, forKey: .shapeMatch)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(directionsType, forKey: .directionsType)
        try container.encodeIfPresent(filters, forKey: .filters)
        try container.encodeIfPresent(elevationInterval, forKey: .elevationInterval)
    }
}
