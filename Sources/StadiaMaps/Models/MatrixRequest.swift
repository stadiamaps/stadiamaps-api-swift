//
// MatrixRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct MatrixRequest: Codable, JSONEncodable, Hashable {
    public enum DirectionsType: String, Codable, CaseIterable {
        case _none = "none"
        case maneuvers
        case instructions
    }

    static let sourcesRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    static let targetsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public var units: DistanceUnit?
    public var language: RoutingLanguages?
    /** The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter. */
    public var directionsType: DirectionsType? = .instructions
    /** An identifier to disambiguate requests (echoed by the server). */
    public var id: String?
    /** The list of starting locations */
    public var sources: [MatrixWaypoint]
    /** The list of ending locations */
    public var targets: [MatrixWaypoint]
    public var costing: MatrixCostingModel
    public var costingOptions: CostingOptions?
    /** Only applicable to one-to-many or many-to-one requests. This defaults to all locations. When specified explicitly, this option allows a partial result to be returned. This is basically equivalent to \"find the closest/best locations out of the full set.\" This can have a dramatic improvement for large requests. */
    public var matrixLocations: Int?

    public init(units: DistanceUnit? = nil, language: RoutingLanguages? = nil, directionsType: DirectionsType? = .instructions, id: String? = nil, sources: [MatrixWaypoint], targets: [MatrixWaypoint], costing: MatrixCostingModel, costingOptions: CostingOptions? = nil, matrixLocations: Int? = nil) {
        self.units = units
        self.language = language
        self.directionsType = directionsType
        self.id = id
        self.sources = sources
        self.targets = targets
        self.costing = costing
        self.costingOptions = costingOptions
        self.matrixLocations = matrixLocations
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case units
        case language
        case directionsType = "directions_type"
        case id
        case sources
        case targets
        case costing
        case costingOptions = "costing_options"
        case matrixLocations = "matrix_locations"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(directionsType, forKey: .directionsType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(sources, forKey: .sources)
        try container.encode(targets, forKey: .targets)
        try container.encode(costing, forKey: .costing)
        try container.encodeIfPresent(costingOptions, forKey: .costingOptions)
        try container.encodeIfPresent(matrixLocations, forKey: .matrixLocations)
    }
}
