//
// MotorcycleCostingOptionsAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MotorcycleCostingOptionsAllOf: Codable, JSONEncodable, Hashable {

    static let useHighwaysRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let useTrailsRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    /** A measure of willingness to use highways. Values near 0 attempt to avoid highways and stay on roads with lower speeds, and values near 1 indicate the rider is more comfortable on these roads. */
    public var useHighways: Double? = 1.0
    /** A measure of the rider's sense of adventure. Values near 0 attempt to avoid highways and stay on roads with potentially unsuitable terrain (trails, tracks, unclassified, or bad surfaces), and values near 1 will tend to avoid major roads and route on secondary roads. */
    public var useTrails: Double? = 0.0

    public init(useHighways: Double? = 1.0, useTrails: Double? = 0.0) {
        self.useHighways = useHighways
        self.useTrails = useTrails
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case useHighways = "use_highways"
        case useTrails = "use_trails"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(useHighways, forKey: .useHighways)
        try container.encodeIfPresent(useTrails, forKey: .useTrails)
    }
}

