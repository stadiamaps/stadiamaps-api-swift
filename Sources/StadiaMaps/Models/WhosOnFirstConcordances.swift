//
// WhosOnFirstConcordances.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct WhosOnFirstConcordances: Codable, JSONEncodable, Hashable {
    public var eurographicsGiscoId: String?
    public var faaCode: String?
    public var factualId: String?
    public var fifaId: String?
    public var fipsCode: String?
    /** An Open Data France EPCI code. */
    public var frGovEpciCode: Int64?
    /** Institut national de la statistique et des études économiques (Insee) code */
    public var fraInseeCode: Int64?
    public var geonamesId: Int64?
    public var geoplanetId: Int64?
    /** A Statoids HASC ID. */
    public var hascId: String?
    public var iataCode: String?
    public var icaoCode: String?
    public var ituId: String?
    public var karmashapesId: Int64?
    public var naturalEarthId: String?
    /** A Eurostat NUTS 2021 ID */
    public var nuts2021Id: String?
    public var quattroshapesId: Int64?
    /** A Quattroshapes Point Gazetteer ID. */
    public var quattroshapesPgId: Int64?
    public var usCensusGeoId: Int64?
    public var wikidataId: String?
    public var wikipediaPage: String?

    public init(eurographicsGiscoId: String? = nil, faaCode: String? = nil, factualId: String? = nil, fifaId: String? = nil, fipsCode: String? = nil, frGovEpciCode: Int64? = nil, fraInseeCode: Int64? = nil, geonamesId: Int64? = nil, geoplanetId: Int64? = nil, hascId: String? = nil, iataCode: String? = nil, icaoCode: String? = nil, ituId: String? = nil, karmashapesId: Int64? = nil, naturalEarthId: String? = nil, nuts2021Id: String? = nil, quattroshapesId: Int64? = nil, quattroshapesPgId: Int64? = nil, usCensusGeoId: Int64? = nil, wikidataId: String? = nil, wikipediaPage: String? = nil) {
        self.eurographicsGiscoId = eurographicsGiscoId
        self.faaCode = faaCode
        self.factualId = factualId
        self.fifaId = fifaId
        self.fipsCode = fipsCode
        self.frGovEpciCode = frGovEpciCode
        self.fraInseeCode = fraInseeCode
        self.geonamesId = geonamesId
        self.geoplanetId = geoplanetId
        self.hascId = hascId
        self.iataCode = iataCode
        self.icaoCode = icaoCode
        self.ituId = ituId
        self.karmashapesId = karmashapesId
        self.naturalEarthId = naturalEarthId
        self.nuts2021Id = nuts2021Id
        self.quattroshapesId = quattroshapesId
        self.quattroshapesPgId = quattroshapesPgId
        self.usCensusGeoId = usCensusGeoId
        self.wikidataId = wikidataId
        self.wikipediaPage = wikipediaPage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eurographicsGiscoId = "eurographics_gisco_id"
        case faaCode = "faa_code"
        case factualId = "factual_id"
        case fifaId = "fifa_id"
        case fipsCode = "fips_code"
        case frGovEpciCode = "fr_gov_epci_code"
        case fraInseeCode = "fra_insee_code"
        case geonamesId = "geonames_id"
        case geoplanetId = "geoplanet_id"
        case hascId = "hasc_id"
        case iataCode = "iata_code"
        case icaoCode = "icao_code"
        case ituId = "itu_id"
        case karmashapesId = "karmashapes_id"
        case naturalEarthId = "natural_earth_id"
        case nuts2021Id = "nuts_2021_id"
        case quattroshapesId = "quattroshapes_id"
        case quattroshapesPgId = "quattroshapes_pg_id"
        case usCensusGeoId = "us_census_geo_id"
        case wikidataId = "wikidata_id"
        case wikipediaPage = "wikipedia_page"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eurographicsGiscoId, forKey: .eurographicsGiscoId)
        try container.encodeIfPresent(faaCode, forKey: .faaCode)
        try container.encodeIfPresent(factualId, forKey: .factualId)
        try container.encodeIfPresent(fifaId, forKey: .fifaId)
        try container.encodeIfPresent(fipsCode, forKey: .fipsCode)
        try container.encodeIfPresent(frGovEpciCode, forKey: .frGovEpciCode)
        try container.encodeIfPresent(fraInseeCode, forKey: .fraInseeCode)
        try container.encodeIfPresent(geonamesId, forKey: .geonamesId)
        try container.encodeIfPresent(geoplanetId, forKey: .geoplanetId)
        try container.encodeIfPresent(hascId, forKey: .hascId)
        try container.encodeIfPresent(iataCode, forKey: .iataCode)
        try container.encodeIfPresent(icaoCode, forKey: .icaoCode)
        try container.encodeIfPresent(ituId, forKey: .ituId)
        try container.encodeIfPresent(karmashapesId, forKey: .karmashapesId)
        try container.encodeIfPresent(naturalEarthId, forKey: .naturalEarthId)
        try container.encodeIfPresent(nuts2021Id, forKey: .nuts2021Id)
        try container.encodeIfPresent(quattroshapesId, forKey: .quattroshapesId)
        try container.encodeIfPresent(quattroshapesPgId, forKey: .quattroshapesPgId)
        try container.encodeIfPresent(usCensusGeoId, forKey: .usCensusGeoId)
        try container.encodeIfPresent(wikidataId, forKey: .wikidataId)
        try container.encodeIfPresent(wikipediaPage, forKey: .wikipediaPage)
    }
}
