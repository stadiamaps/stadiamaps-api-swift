//
// HeightRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct HeightRequest: Codable, JSONEncodable, Hashable {
    public enum ShapeFormat: String, Codable, CaseIterable {
        case polyline6
        case polyline5
    }

    public static let heightPrecisionRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    public static let resampleDistanceRule = NumericRule<Int>(minimum: 10, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** An identifier to disambiguate requests (echoed by the server). */
    public var id: String?
    /** REQUIRED if `encoded_polyline` is not present. */
    public var shape: [Coordinate]?
    /** REQUIRED if `shape` is not present. An encoded polyline (https://developers.google.com/maps/documentation/utilities/polylinealgorithm). */
    public var encodedPolyline: String?
    /** Specifies whether the polyline is encoded with 6 digit precision (polyline6) or 5 digit precision (polyline5). */
    public var shapeFormat: ShapeFormat? = .polyline6
    /** Controls whether the returned array is one-dimensional (height only) or two-dimensional (with a range and height). The range dimension can be used to generate a graph or steepness gradient along a route. */
    public var range: Bool? = false
    /** The decimal precision (number of digits after the point) of the output. When 0, integer values are returned. Valid values are 0, 1, and 2. */
    public var heightPrecision: Int? = 0
    /** The distance at which the input polyline should be sampled to provide uniform distances between points. If not set, the input shape will be used as-is. */
    public var resampleDistance: Int?

    public init(id: String? = nil, shape: [Coordinate]? = nil, encodedPolyline: String? = nil, shapeFormat: ShapeFormat? = .polyline6, range: Bool? = false, heightPrecision: Int? = 0, resampleDistance: Int? = nil) {
        self.id = id
        self.shape = shape
        self.encodedPolyline = encodedPolyline
        self.shapeFormat = shapeFormat
        self.range = range
        self.heightPrecision = heightPrecision
        self.resampleDistance = resampleDistance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case shape
        case encodedPolyline = "encoded_polyline"
        case shapeFormat = "shape_format"
        case range
        case heightPrecision = "height_precision"
        case resampleDistance = "resample_distance"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(shape, forKey: .shape)
        try container.encodeIfPresent(encodedPolyline, forKey: .encodedPolyline)
        try container.encodeIfPresent(shapeFormat, forKey: .shapeFormat)
        try container.encodeIfPresent(range, forKey: .range)
        try container.encodeIfPresent(heightPrecision, forKey: .heightPrecision)
        try container.encodeIfPresent(resampleDistance, forKey: .resampleDistance)
    }
}

@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension HeightRequest: Identifiable {}
